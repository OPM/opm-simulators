@article{ViennaCL,
author = {Rupp, Karl and Tillet, Philippe and Rudolf, Florian and Weinbub, Josef and Morhammer, Andreas and Grasser, Tibor and J\"{u}ngel, Ansgar and Selberherr, Siegfried},
title = {{ViennaCL}---Linear Algebra Library for Multi- and Many-Core Architectures},
journal = {SIAM Journal on Scientific Computing},
volume = {38},
number = {5},
pages = {S412-S439},
year = {2016},
doi = {10.1137/15M1026419},
URL = { 
        https://doi.org/10.1137/15M1026419
},
eprint = { 
        https://doi.org/10.1137/15M1026419
}
,
    abstract = { CUDA, OpenCL, and OpenMP are popular programming models for the multicore architectures of CPUs and many-core architectures of GPUs or Xeon Phis. At the same time, computational scientists face the question of which programming model to use to obtain their scientific results. We present the linear algebra library ViennaCL, which is built on top of all three programming models, thus enabling computational scientists to interface to a single library, yet obtain high performance for all three hardware types. Since the respective compute back end can be selected at runtime, one can seamlessly switch between different hardware types without the need for error-prone and time-consuming recompilation steps. We present new benchmark results for sparse linear algebra operations in ViennaCL, complementing results for the dense linear algebra operations in ViennaCL reported in earlier work. Comparisons with vendor libraries show that ViennaCL provides better overall performance for sparse matrix-vector and sparse matrix-matrix products. Additional benchmark results for pipelined iterative solvers with kernel fusion and preconditioners identify the respective sweet spots for CPUs, Xeon Phis, and GPUs. }
}

@Article{         mills2021,
  title         = {Toward performance-portable {PETS}c for {GPU}-based exascale systems},
  journal       = {Parallel Computing},
  volume        = {108},
  pages         = {102831},
  year          = {2021},
  issn          = {0167-8191},
  doi           = {10.1016/j.parco.2021.102831},
  url           = {https://www.sciencedirect.com/science/article/pii/S016781912100079X},
  author        = {Richard Tran Mills and Mark F. Adams and Satish Balay and Jed Brown and Alp Dener}
}

@article{OPMFLOW,
title = {The {Open} {Porous} {Media} {Flow} reservoir simulator},
journal = {Computers \& Mathematics with Applications},
volume = {81},
pages = {159-185},
year = {2021},
note = {Development and Application of Open-source Software for Problems with Numerical PDEs},
issn = {0898-1221},
doi = {10.1016/j.camwa.2020.05.014},
url = {https://www.sciencedirect.com/science/article/pii/S0898122120302182},
author = {Atgeirr Flø Rasmussen and Tor Harald Sandve and Kai Bao and Andreas Lauser and Joakim Hove and Bård Skaflestad and Robert Klöfkorn and Markus Blatt and Alf Birger Rustad and Ove Sævareid and Knut-Andreas Lie and Andreas Thune},
abstract = {The Open Porous Media (OPM) initiative is a community effort that encourages open innovation and reproducible research for simulation of porous media processes. OPM coordinates collaborative software development, maintains and distributes open-source software and open data sets, and seeks to ensure that these are available under a free license in a long-term perspective. In this paper, we present OPM Flow, which is a reservoir simulator developed for industrial use, as well as some of the individual components used to make OPM Flow. The descriptions apply to the 2019.10 release of OPM.}
}

@article{BASTIAN202175,
title = {The {Dune} framework: Basic concepts and recent developments},
journal = {Computers \& Mathematics with Applications},
volume = {81},
pages = {75-112},
year = {2021},
note = {Development and Application of Open-source Software for Problems with Numerical PDEs},
issn = {0898-1221},
doi = {10.1016/j.camwa.2020.06.007},
url = {https://www.sciencedirect.com/science/article/pii/S089812212030256X},
author = {Peter Bastian and Markus Blatt and Andreas Dedner and Nils-Arne Dreier and Christian Engwer and René Fritze and Carsten Gräser and Christoph Grüninger and Dominic Kempf and Robert Klöfkorn and Mario Ohlberger and Oliver Sander},
abstract = {This paper presents the basic concepts and the module structure of the Distributed and Unified Numerics Environment and reflects on recent developments and general changes that happened since the release of the first Dune version in 2007 and the main papers describing that state Bastian etal. (2008a, 2008b). This discussion is accompanied with a description of various advanced features, such as coupling of domains and cut cells, grid modifications such as adaptation and moving domains, high order discretizations and node level performance, non-smooth multigrid methods, and multiscale methods. A brief discussion on current and future development directions of the framework concludes the paper.}
}

@inbook{computer_arch_hennessy_patterson,
author = {Hennessy, John L. and Patterson, David A.},
title = {Computer Architecture, Sixth Edition: A Quantitative Approach},
year = {2017},
pages = {5-6},
isbn = {0128119055},
publisher = {Morgan Kaufmann Publishers Inc.},
address = {San Francisco, CA, USA},
edition = {6th},
abstract = {Computer Architecture: A Quantitative Approach, Sixth Edition has been considered essential reading by instructors, students and practitioners of computer design for over 20 years. The sixth edition of this classic textbook is fully revised with the latest developments in processor and system architecture. It now features examples from the RISC-V (RISC Five) instruction set architecture, a modern RISC instruction set developed and designed to be a free and openly adoptable standard. It also includes a new chapter on domain-specific architectures and an updated chapter on warehouse-scale computing that features the first public information on Google's newest WSC. True to its original mission of demystifying computer architecture, this edition continues the longstanding tradition of focusing on areas where the most exciting computing innovation is happening, while always keeping an emphasis on good engineering design. Includes a new chapter on domain-specific architectures, explaining how they are the only path forward for improved performance and energy efficiency given the end of Moores Law and Dennard scaling Features the first publication of several DSAs from industry Features extensive updates to the chapter on warehouse-scale computing, with the first public information on the newest Google WSC Offers updates to other chapters including new material dealing with the use of stacked DRAM; data on the performance of new NVIDIA Pascal GPU vs. new AVX-512 Intel Skylake CPU; and extensive additions to content covering multicore architecture and organization Includes "Putting It All Together" sections near the end of every chapter, providing real-world technology examples that demonstrate the principles covered in each chapter Includes review appendices in the printed text and additional reference appendices available online Includes updated and improved case studies and exercises}
}

@article{dumux,
title = "{DuMu\textsuperscript{x} 3 - an open-source simulator for solving flow and transport problems in porous media with a focus on model coupling}",
journal = "Computers \& Mathematics with Applications",
year = "2020",
issn = "0898-1221",
doi = "10.1016/j.camwa.2020.02.012",
author = {Timo Koch and Dennis Gl\"aser and Kilian Weishaupt and Sina Ackermann and Martin Beck and Beatrix Becker and Samuel Burbulla and Holger Class and Edward Coltman and Simon Emmert and Thomas Fetzer and Christoph Gr\"uninger and Katharina Heck and Johannes Hommel and Theresa Kurz and Melanie Lipp and Farid Mohammadi and Samuel Scherrer and Martin Schneider and Gabriele Seitz and Leopold Stadler and Martin Utz and Felix Weinhardt and Bernd Flemisch},
keywords = "Porous media, Multi-phase flow, , Coupled problems, Open-source software, Research software",
abstract = "We present version 3 of the open-source simulator for flow and transport processes in porous media DuMux. DuMux is based on the modular C++ framework Dune (Distributed and Unified Numerics Environment) and is developed as a research code with a focus on modularity and reusability. We describe recent efforts in improving the transparency and efficiency of the development process and community-building, as well as efforts towards quality assurance and reproducible research. In addition to a major redesign of many simulation components in order to facilitate setting up complex simulations in DuMux, version 3 introduces a more consistent abstraction of finite volume schemes. Finally, the new framework for multi-domain simulations is described, and three numerical examples demonstrate its flexibility."
}

@book{mrst, place={Cambridge}, title={An Introduction to Reservoir Simulation Using MATLAB/GNU Octave: User Guide for the MATLAB Reservoir Simulation Toolbox (MRST)}, publisher={Cambridge University Press}, author={Lie, Knut-Andreas}, year={2019}}

@article{pyopmspe11,
title = "pyopmspe11: A {Python} framework using {OPM Flow} for the {SPE11} benchmark project",
journal = "Journal of Open Source Software",
publisher = "The Open Journal",
year = "2025",
issn = "---",
doi = "10.21105/joss.07357",
author = {David Landa-Marbán and Tor H. Sandve},
keywords = "IN REVIEW",
url = "https://doi.org/10.21105/joss.07357"
}

@article{Nordbotten2024,
  title = {The 11th Society of Petroleum Engineers Comparative Solution Project: Problem Definition},
  volume = {29},
  ISSN = {1930-0220},
  url = {http://dx.doi.org/10.2118/218015-PA},
  DOI = {10.2118/218015-pa},
  number = {05},
  journal = {SPE Journal},
  publisher = {Society of Petroleum Engineers (SPE)},
  author = {Nordbotten,  Jan M. and Ferno,  Martin A. and Flemisch,  Bernd and Kovscek,  Anthony R. and Lie,  Knut-Andreas},
  year = {2024},
  month = jan,
  pages = {2507–2524}
}

@INPROCEEDINGS{dune-istl,
  author = {Blatt, M. and Bastian, P.},
  title = {The Iterative Solver Template Library},
  booktitle = {Applied Parallel Computing -- State of the Art in Scientific Computing},
  year = {2007},
  doi = {10.1007/978-3-540-75755-9_82},
  editor = {Kagstr\"om, B. and Elmroth, E. and Dongarra, J. and Wasniewski, J.},
  pages = {666-675},
  address = {Berlin/Heidelberg},
  publisher = {Springer}
}


@misc{cuda,
  author={NVIDIA and Vingelmann, Péter and Fitzek, Frank H.P.},
  title={CUDA, release: 12.2.r12.2},
  year={2023},
  url={https://developer.nvidia.com/cuda-toolkit},
} 

@misc{hipify,
    author={{Advanced Micro Devices, Inc.}},
    title={hipify-perl},
    year={2024},
    url={https://rocmdocs.amd.com/projects/HIPIFY/en/latest/hipify-perl.html#hipify-perl},
}

@misc{HIP,
    author={{Advanced Micro Devices, Inc.}},
    title={Heterogeneous-computing Interface for Portability},
    year={2024},
    url={https://rocm.docs.amd.com/projects/HIP/en/latest/},
}

@article{armadillo,
   title={Practical Sparse Matrices in C++ with Hybrid Storage and Template-Based Expression Optimisation},
   volume={24},
   ISSN={2297-8747},
   url={http://dx.doi.org/10.3390/mca24030070},
   DOI={10.3390/mca24030070},
   number={3},
   journal={Mathematical and Computational Applications},
   publisher={MDPI AG},
   author={Sanderson, Conrad and Curtin, Ryan},
   year={2019},
   month=jul, pages={70} }


@article{curtin_bandicoot_2023,
	title = {Bandicoot: {C}++ {Library} for {GPU} {Linear} {Algebra} and {Scientific} {Computing}},
	url = {http://arxiv.org/abs/2308.03120v1},
	abstract = {This report provides an introduction to the Bandicoot C++ library for linear
algebra and scientific computing on GPUs, overviewing its user interface and
performance characteristics, as well as the technical details of its internal
design. Bandicoot is the GPU-enabled counterpart to the well-known Armadillo
C++ linear algebra library, aiming to allow users to take advantage of
GPU-accelerated computation for their existing codebases without significant
changes. Adapting the same internal template meta-programming techniques that
Armadillo uses, Bandicoot is able to provide compile-time optimisation of
mathematical expressions within user code. The library is ready for production
use and is available at https://coot.sourceforge.io. Bandicoot is distributed
under the Apache 2.0 License.},
	journal = {arXiv:2308.03120v1},
	author = {Curtin, Ryan R. and Edel, Marcus and Sanderson, Conrad},
	month = aug,
	year = {2023},
	file = {2308.03120v1.Bandicoot_C_Library_for_GPU_Linear_Algebra_and_Scientific_Computing.pdf:/home/kjetil/Zotero/storage/TMSPZFI9/2308.03120v1.Bandicoot_C_Library_for_GPU_Linear_Algebra_and_Scientific_Computing.pdf:application/pdf},
}

@proceedings{andersen_ilu_dilu_rsc,
    author = {Andersen, T. M. and Torben, J. and Lye, K. O. and Rasmussen, A. F. and Lie, K. A.},
    title = {A Comparison of DILU And ILU(0) as GPU-Accelerated Preconditioners},
    volume = {SPE Reservoir Simulation Conference},
    series = {SPE Reservoir Simulation Conference},
    pages = {D021S009R004},
    year = {2025},
    month = {03},
    abstract = {We develop auto-tuned GPU implementations of ILU(0) and DILU preconditioners using mixed precision and compare their performance against various GPU-based ILU(0) implementations, integrated into the open-source OPM Flow reservoir simulator. The preconditioners are parallelized conservatively to ensure that the results match those from serial computation up to instruction set equivalence. Our implementation incorporates techniques such as graph coloring, row reordering, matrix splitting, mixed-precision schemes, and auto-tuning to improve runtime efficiency.We evaluate the preconditioners on both NVIDIA and AMD architectures, spanning consumer-grade, workstation, and HPC-grade GPUs. The results show that ILU(0) and DILU exhibit similar numerical behavior and performance for the benchmark runs, although DILU can be implemented to use significantly less memory. Both implementations outperform a reference ILU(0) preconditioner using hipSPARSE or cuSPARSE. The triangular solve achieves a maximum speedup of 4x, and the factorization is sped up by a factor of 16, resulting in an overall linear solver speedup of 2.8x. Profiling confirms that we use more than half of the available memory bandwidth on a gaming-grade GPU and close to half on an HPC-grade GPU. Additionally, our preconditioners outperform the more sophisticated CPR preconditioner on a 16-core CPU for medium and large realizations of Case C from the 11th SPE Comparative Solution Project, achieving speedups of up to 2.5x per linear solve. However, the implementations do not fully scale to utilize the resources of the HPC card efficiently, as their performance is comparable to that of consumer-grade GPUs.},
    doi = {10.2118/223873-MS},
    url = {https://doi.org/10.2118/223873-MS},
    eprint = {https://onepetro.org/spersc/proceedings-pdf/25RSC/25RSC/D021S009R004/4646931/spe-223873-ms.pdf},
}

@software{spe11c_dataset,
  author       = {Lye, Kjetil Olsen and
                  Andersen, Tobias Meyer and
                  Torben, Jakob and
                  Rasmussen, Atgeirr},
  title        = {gpu-ISTL - Extending OPM Flow with GPU Linear
                   Solvers
                  },
  month        = apr,
  year         = 2025,
  publisher    = {Zenodo},
  version      = {2024.10},
  doi          = {10.5281/zenodo.15259506},
  url          = {https://doi.org/10.5281/zenodo.15259506},
}
